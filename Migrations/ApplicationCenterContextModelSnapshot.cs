// <auto-generated />
using System;
using System.Collections.Generic;
using ApplicationCenter.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ApplicationCenter.Migrations
{
    [DbContext(typeof(ApplicationCenterContext))]
    partial class ApplicationCenterContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ApplicationCenter.Api.Models.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Createdat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.PrimitiveCollection<List<string>>("Files")
                        .HasColumnType("text[]")
                        .HasColumnName("files");

                    b.Property<string>("Fullname")
                        .HasColumnType("text")
                        .HasColumnName("fullname");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("Servicetype")
                        .HasColumnType("text")
                        .HasColumnName("servicetype");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'Новая'::text");

                    b.Property<Guid?>("Userid")
                        .HasColumnType("uuid")
                        .HasColumnName("userid");

                    b.Property<string>("Xmlpath")
                        .HasColumnType("text")
                        .HasColumnName("xmlpath");

                    b.HasKey("Id")
                        .HasName("applications_pkey");

                    b.HasIndex("Userid");

                    b.ToTable("applications", (string)null);
                });

            modelBuilder.Entity("ApplicationCenter.Api.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Fullname")
                        .HasColumnType("text")
                        .HasColumnName("fullname");

                    b.Property<string>("Login")
                        .HasColumnType("text")
                        .HasColumnName("login");

                    b.Property<string>("Passwordhash")
                        .HasColumnType("text")
                        .HasColumnName("passwordhash");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("Placeofwork")
                        .HasColumnType("text")
                        .HasColumnName("placeofwork");

                    b.HasKey("Id")
                        .HasName("users_pkey");

                    b.HasIndex(new[] { "Login" }, "users_login_key")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("ApplicationCenter.Api.Models.Application", b =>
                {
                    b.HasOne("ApplicationCenter.Api.Models.User", "User")
                        .WithMany("Applications")
                        .HasForeignKey("Userid")
                        .HasConstraintName("applications_userid_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApplicationCenter.Api.Models.User", b =>
                {
                    b.Navigation("Applications");
                });
#pragma warning restore 612, 618
        }
    }
}
